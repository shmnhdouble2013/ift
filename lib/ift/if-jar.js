/**
 * 生成java vo 类
 */
var path = require('path'),
    fs = require('fs'),
    url = require('url'),
    util = require('util'),
    cwd = process.cwd();

var DEFAULT_ENCODING = 'utf-8';  


/**
 *
 * @param {Object} config 
 * @param {string} json js 路径
 */
function ifJar(opt) {
    var dataDir = opt.dataDir,
        savePath = opt.savePath, 
        spawn = require('child_process').spawn,
        exec = require("child_process").exec;

    // tojavaVo.jar path
    var tojavaVo = __dirname+"./tools/jsonParseVo.jar";

       

        // 转换java bean文件 
        function parseJavaBean(Things){
            for (var i = Things.length - 1; i >= 0; i--) {
                var fielName = Things[i];

            };

        }
         
        exe(["/c","java","-jar", tojavaVo, "test.js"]);


        fs.readFileSync('demo.js', 'utf-8'); 

        fs.writeFileSync('abc.js', 'abc', 'utf-8'); 



       




         
        function exe(command){            
            var cmd = spawn("cmd", command);
         
            cmd.stdout.setEncoding("utf-8");

            cmd.stdout.on("data", function(data){
                console.log("------------------------------");
                console.log("exec", command);
                console.log("stdout:"+data);
            });
         
            cmd.stderr.on("data",function(data){                
                console.log("------------------------------");
                console.log("stderr:"+data);
            });

            cmd.on("exit",function(code){
                console.log("------------------------------");
                console.log("exited with code:"+code);
            });

            cmd.on('close', function (code) {
                console.log("------------------------------");
                console.log('toJavaBean process exited with code ' + code);
            });
            
            
        };

        // 读取js文件 获取相关 既定字段
        function getIndexStr(){

        }

        // 循环文件名 进行 转换处理
        function coverVo(){
            var files = getJsFiles();

            for (var i = files.length - 1; i >= 0; i--) {
                var fileName = files[i],
                    pathStr = path.join(dataDir, fileName);

                fs.readFile(fileName, function(err, data){
                    if(err){
                       throw err;  
                    }

                    JSON.stringify )和反序列(  
                    JSON.parse(data);
                });

            };
        }


        // 读取目录js文件 数组 数据
        function getJsFiles(dataDir){
            var jsfiles = [];

            fs.readdir(dataDir, function(err, files){
                var filesAry = filterFile(files),
                    length = filesAry.length;

                if(err || !length){
                    return;
                }

                return jsfiles = filesAry;
            });

            return jsfiles;
        }

        // 文件过滤 - 只处理 js文件
        function filterFile (Things) {
            var ary = [],
                reg = /\.js$/g;
            
            for (var i = Things.length - 1; i >= 0; i--) {
                var files = Things[i],
                    isJs = reg.test(files);
                
                if(isJs){
                    ary.push(files);
                }    
            };

            return ary;
        }

}


/**
 * 模板文件渲染
 * 替换符格式
 * {#keyword}
 *
 * @param {Object} opt
 * @param {string} opt.tplPath
 * @param {string} [opt.encoding]
 * @param {Object} [opt.data]
 * @returns {string}
 */
function render(opt) {
    var data = opt.data || {},
        encoding = opt.encoding || DEFAULT_ENCODING,
        tplPath = opt.tplPath;

    //版权信息
    data.ersync = data.ersync || 'Generated by ifJar';
    data.author = data.author || '水木年华double<huangjia2015@gmail.com>';
    data.date = data.date || new Date();
    data.copyright = data.copyright || 'Copyright (c) 2013 水木年华double';

    // 获取模板文件
    var source = fs.readFileSync(tplPath, encoding);

    return source.replace(/\{#(.+?)\}/g, function(match, key) {//match==$1, key==$2
        var replacer = data[key];

        return ('undefined' == typeof replacer ? '' : replacer);
    });
}


exports.ifJar = ifJar;

